			    INDEX
                        1. Preparation
                        2. Build & run with PCI IPC simulation
                        3. Build & run with Netlink IPC simulation
                        4. Workflow
                        5. Use custom sources
			6. Tested host configurations

This is the buildroot-external project to build image for the Marvell's Prestera Switch.

                        Preparation
                        ===========
Install openssl on host.
For debian/Ubuntu:
sudo apt-get install libssl-dev
Make sure cpp and gcc has the same version:
gcc -v && cpp -v

Location of deliverables from github:
Kernel prestera driver: https://github.com/Marvell-switching/switchdev-prestera 
CPSS drivers: https://github.com/Marvell-switching/mrvl-prestera
CPSS appDemo binary: https://github.com/Marvell-switching/switchdev-binaries

                          Workflow
                          ========
This section describes the basic development workflow with buildroot
to compile & deploy changes made for appDemo or switchdev driver.

1) Build required defconfig
First you need to choose and build configuration for the target
board, for example lets it be AC5x board (AC5x SoC):

    $ ./build.sh ac5x_trampoline

For the first time it may take long time to download required packages, kernel
building.

After success, all related files, binaries, copied sources for selected build are located
in output/ac5x_trampoline. The folder contains standart Buildroot layout:

    output/ac5x_trampoline/
                         images/           - generated rootfs, kernel, dtb binaries
                               /rootfs.tar - archived target rootfs
                               /Image     - kernel image
                               /*.dtb      - DTB file.

                         target/ - libs, apps installed for target
                         host/ - libs, apps installed for the host (build machine)
                         build/xxx - xxx package sources with compiled files
                         

2) Build packages:
Buildroot has several packages which describes how to build components
needed:

    package/cpss/fw-appdemo - appDemo (Cloned as binary blob from github)
    package/cpss/cpss-prestera-swdev-kmod - prestera_sw
    package/cpss/cpss-drivers-kmod - Int, Dma, Mbus kernel modules

3) Rebuild sources after modification:

    a) to cleanup and rebuild prestera_sw sources (full rebuild):

      make -C output/ac5x_trampoline prestera-swdev-kmod-dirclean prestera-swdev-kmod-dirclean

4) Deploy rootfs, kernel, dtb to the tftpboot server for NFS boot:

To deploy everything via SSH to user's home folder on server for NFS boot, run the following:

    make -C output/ac5x_trampoline deploy

    it will deploy contents of output/<build_name>/images/deploy/* folder to SSH_IP:~/<build_name>

                          Use custom sources
                          ==================
To use custom sources for Buildroot packages (for example linux) it might be specified
from command line:

    $ LINUX_OVERRIDE_SRCDIR={PATH_TO_LINUX_SRC_DIR} make -C output/ac5x_trampoline

    or

    $ LINUX_OVERRIDE_SRCDIR={PATH_TO_LINUX_SRC_DIR} ./build.sh ac5x_trampoline

this variable should be specified before each Buildroot invocation.

6. Tested host configurations:

6.a. Ubuntu 20.04.1 LTS focal, gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04) ,
	kernel 5.4.0-52-generic x86_64 GNU/Linux
6.b. Ubuntu 18.04.5 LTS bionic, gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) ,
	kernel 4.15.0-132-generic x86_64 GNU/Linux

