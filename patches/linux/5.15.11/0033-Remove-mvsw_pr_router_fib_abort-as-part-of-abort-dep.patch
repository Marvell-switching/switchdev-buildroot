From d47937d8a3e77658e5cc5f9dc53d5bee780b30cb Mon Sep 17 00:00:00 2001
From: Yevhen Orlov <yevhen.orlov@plvision.eu>
Date: Wed, 19 Jan 2022 22:09:07 +0200
Subject: [PATCH 33/40] Remove mvsw_pr_router_fib_abort as part of abort
 deprecation

Also rename mvsw_pr_k_arb_abort to prestera_k_arb_flush as it is
not more abort. But just flushing of arbiter entries.

JIRA: SWITCHDEV-2533
Signed-off-by: Yevhen Orlov <yevhen.orlov@plvision.eu>
Change-Id: I3378da15e3b77ddb43727b4c570a4c71b76edcab
---
 .../marvell/prestera/prestera_router.c        | 25 +++++++++++--------
 1 file changed, 15 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/marvell/prestera/prestera_router.c b/drivers/net/ethernet/marvell/prestera/prestera_router.c
index 6ce48e9cb2fc..006433f0d311 100644
--- a/drivers/net/ethernet/marvell/prestera/prestera_router.c
+++ b/drivers/net/ethernet/marvell/prestera/prestera_router.c
@@ -1225,10 +1225,21 @@ static void __mvsw_pr_k_arb_abort_fib(struct prestera_switch *sw)
 	}
 }
 
-static void mvsw_pr_k_arb_abort(struct prestera_switch *sw)
-{
+static void prestera_k_arb_flush(struct prestera_switch *sw)
+{
+	/* Function to remove all arbiter entries and related hw objects. */
+	/* Sequence:
+	 *   1) Clear arbiter tables, but don't touch hw
+	 *   2) Clear hw
+	 * We use such approach, because arbiter object is not directly mapped
+	 * to hw. So deletion of one arbiter object may even lead to creation of
+	 * hw object (e.g. in case of overlapped routes).
+	 */
 	__mvsw_pr_k_arb_abort_fib(sw);
 	__mvsw_pr_k_arb_abort_neigh(sw);
+
+	/* Clear hw layer */
+	prestera_fib_node_destroy_ht(sw);
 }
 
 /* Make necesssary things  with neighbour, if FDB upupdated
@@ -2139,12 +2150,6 @@ mvsw_pr_fib_node_util_is_neighbour(struct prestera_fib_node *fib_node)
 	return true;
 }
 
-static void mvsw_pr_router_fib_abort(struct prestera_switch *sw)
-{
-	prestera_fib_node_destroy_ht(sw);
-	mvsw_pr_k_arb_abort(sw);
-}
-
 struct mvsw_pr_fib_event_work {
 	struct work_struct work;
 	struct prestera_switch *sw;
@@ -2305,7 +2310,7 @@ static void mvsw_pr_router_fib_dump_flush(struct notifier_block *nb)
 	router = container_of(nb, struct prestera_router, fib_nb);
 	flush_workqueue(mvsw_r_owq);
 	flush_workqueue(mvsw_r_wq);
-	prestera_fib_node_destroy_ht(router->sw);
+	prestera_k_arb_flush(router->sw);
 }
 
 static int
@@ -2579,7 +2584,7 @@ void prestera_router_fini(struct prestera_switch *sw)
 	rtnl_lock();
 
 	/* TODO: check if vrs necessary ? */
-	mvsw_pr_k_arb_abort(sw);
+	prestera_k_arb_flush(sw);
 	mvsw_pr_rifs_fini(sw);
 	rhashtable_destroy(&sw->router->kern_neigh_cache_ht);
 	rhashtable_destroy(&sw->router->kern_fib_cache_ht);
-- 
2.17.1

